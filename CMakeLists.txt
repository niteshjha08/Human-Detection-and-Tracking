cmake_minimum_required(VERSION 3.2.1)
project (scratch)

# Add project cmake modules to path.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/cmake)

# We probably don't want this to run on every build.
option(COVERAGE "Generate Coverage Data" OFF)

set(OpenCV_DIR "/usr/include/opencv4/opencv2")
set(OpenCV_INCLUDE_DIRS "/usr/local/include/opencv4")
INCLUDE_DIRECTORIES(${OpenCV_DIR})
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})

find_package(OpenCV REQUIRED)

message(STATUS "OpenCV_DIR = $(OpenCV_DIR)")

if (COVERAGE)
    include(CodeCoverage)
    set(LCOV_REMOVE_EXTRA "'vendor/*'")
    setup_target_for_coverage(code_coverage test/cpp-test coverage)
    set(COVERAGE_SRCS app/main.cpp include/lib.hpp)

    SET(CMAKE_CXX_FLAGS "-g -O0 -fprofile-arcs -ftest-coverage")
    SET(CMAKE_C_FLAGS "-g -O0 -fprofile-arcs -ftest-coverage")
    SET(CMAKE_EXE_LINKER_FLAGS "-fprofile-arcs -ftest-coverage")
else()
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -Wpedantic -g")
endif()

include(CMakeToolsHelpers OPTIONAL)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 14)

add_subdirectory(app)
add_subdirectory(test)
add_subdirectory(vendor/googletest/googletest)

include_directories(
    ${CMAKE_SOURCE_DIR}/include
)

add_executable(main app/main.cpp app/detector.cpp include/detector.hpp)
target_link_libraries(main ${OpenCV_LIBS})


